generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model AppSetting {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  key   String @unique
  value String
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  Authenticator Authenticator[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  UserSolution UserSolution[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Puzzle {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  slug        String     @unique
  title       String
  description String?
  solutions   Solution[]
  isPublic    Boolean    @default(true)
}

model Solution {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  puzzle        Puzzle         @relation(fields: [puzzleId], references: [id], onDelete: Cascade)
  puzzleId      String         @db.ObjectId
  date          DateTime
  solution      String
  maxGuesses    Int            @default(6)
  userSolutions UserSolution[]

  @@unique([puzzleId, date])
}

model UserSolution {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  userId     String            @db.ObjectId
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  solutionId String            @db.ObjectId
  solution   Solution          @relation(fields: [solutionId], references: [id], onDelete: Cascade)
  state      UserSolutionState @default(UNSOLVED)
  guesses    String[]
}

enum UserSolutionState {
  UNSOLVED
  WIN
  LOSS
}

type UserPuzzleId {
  userId   String @db.ObjectId
  puzzleId String @db.ObjectId
}

view UserPuzzleStats {
  id              UserPuzzleId @id @map("_id")
  puzzleTitle     String
  winDistribution Int[]
  wins            Int
  losses          Int
}
